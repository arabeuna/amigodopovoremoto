#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script para criar execut√°vel da Academia Amigo do Povo
Usa PyInstaller para gerar um execut√°vel standalone
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path

def create_executable():
    """Cria o execut√°vel usando PyInstaller"""
    
    print("üöÄ Iniciando cria√ß√£o do execut√°vel...")
    
    # Configura√ß√µes do PyInstaller
    app_name = "AcademiaAmigoDoPovo"
    main_script = "app.py"
    
    # Verificar se o arquivo principal existe
    if not os.path.exists(main_script):
        print(f"‚ùå Arquivo {main_script} n√£o encontrado!")
        return False
    
    # Criar diret√≥rio de build se n√£o existir
    build_dir = Path("build")
    dist_dir = Path("dist")
    
    # Limpar builds anteriores
    if build_dir.exists():
        shutil.rmtree(build_dir)
        print("üßπ Limpando build anterior...")
    
    if dist_dir.exists():
        shutil.rmtree(dist_dir)
        print("üßπ Limpando distribui√ß√£o anterior...")
    
    # Comando PyInstaller
    pyinstaller_cmd = [
        "pyinstaller",
        "--onefile",  # Criar um √∫nico arquivo execut√°vel
        "--windowed",  # Sem console (para Windows)
        f"--name={app_name}",
        "--add-data=templates;templates",  # Incluir templates
        "--add-data=static;static",  # Incluir arquivos est√°ticos
        "--add-data=*.json;.",  # Incluir arquivos JSON
        "--hidden-import=flask",
        "--hidden-import=sqlite3",
        "--hidden-import=pandas",
        "--hidden-import=pymongo",
        "--hidden-import=werkzeug",
        "--hidden-import=jinja2",
        "--collect-all=flask",
        "--collect-all=jinja2",
        "--collect-all=werkzeug",
        main_script
    ]
    
    try:
        print("‚öôÔ∏è Executando PyInstaller...")
        print(f"Comando: {' '.join(pyinstaller_cmd)}")
        
        # Executar PyInstaller
        result = subprocess.run(pyinstaller_cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ Execut√°vel criado com sucesso!")
            
            # Verificar se o execut√°vel foi criado
            exe_path = dist_dir / f"{app_name}.exe"
            if exe_path.exists():
                print(f"üìÅ Execut√°vel localizado em: {exe_path.absolute()}")
                
                # Criar arquivo de configura√ß√£o para execut√°vel
                create_executable_config()
                
                # Copiar arquivos necess√°rios
                copy_required_files()
                
                print("üéâ Build conclu√≠do com sucesso!")
                print(f"üì¶ Execut√°vel: {exe_path.absolute()}")
                return True
            else:
                print("‚ùå Execut√°vel n√£o foi encontrado ap√≥s o build")
                return False
        else:
            print("‚ùå Erro durante o build:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao executar PyInstaller: {e}")
        return False

def create_executable_config():
    """Cria arquivo de configura√ß√£o para o execut√°vel"""
    config_content = """
# Configura√ß√£o para execut√°vel
USE_LOCAL_DB=true
FLASK_ENV=production
SECRET_KEY=associacao_amigo_do_povo_2024_secure_key_executable
"""
    
    with open("dist/.env", "w", encoding="utf-8") as f:
        f.write(config_content)
    
    print("‚öôÔ∏è Arquivo de configura√ß√£o criado")

def copy_required_files():
    """Copia arquivos necess√°rios para o diret√≥rio de distribui√ß√£o"""
    dist_path = Path("dist")
    
    # Arquivos a serem copiados
    files_to_copy = [
        "README.md",
        "requirements.txt"
    ]
    
    for file_name in files_to_copy:
        if os.path.exists(file_name):
            shutil.copy2(file_name, dist_path / file_name)
            print(f"üìÑ Copiado: {file_name}")
    
    # Criar arquivo de instru√ß√µes
    instructions = """
# Academia Amigo do Povo - Execut√°vel

## Como usar:

1. Execute o arquivo AcademiaAmigoDoPovo.exe
2. O sistema abrir√° automaticamente no navegador
3. Use as credenciais padr√£o para fazer login:
   - Usu√°rio: admin
   - Senha: admin123

## Caracter√≠sticas:

- ‚úÖ Funciona completamente offline
- ‚úÖ Banco de dados local SQLite
- ‚úÖ Todos os dados s√£o salvos localmente
- ‚úÖ N√£o requer instala√ß√£o do Python
- ‚úÖ N√£o requer conex√£o com internet

## Localiza√ß√£o dos dados:

Os dados s√£o salvos no arquivo 'academia_local.db' no mesmo diret√≥rio do execut√°vel.

## Suporte:

Para suporte t√©cnico, entre em contato com a equipe de desenvolvimento.
"""
    
    with open(dist_path / "LEIA-ME.txt", "w", encoding="utf-8") as f:
        f.write(instructions)
    
    print("üìã Instru√ß√µes criadas")

def main():
    """Fun√ß√£o principal"""
    print("üèóÔ∏è Academia Amigo do Povo - Build Execut√°vel")
    print("=" * 50)
    
    # Verificar se PyInstaller est√° instalado
    try:
        subprocess.run(["pyinstaller", "--version"], capture_output=True, check=True)
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ùå PyInstaller n√£o encontrado. Instale com: pip install pyinstaller")
        return False
    
    # Criar execut√°vel
    success = create_executable()
    
    if success:
        print("\nüéâ Build conclu√≠do com sucesso!")
        print("üìÅ Verifique o diret√≥rio 'dist' para o execut√°vel")
    else:
        print("\n‚ùå Falha no build")
    
    return success

if __name__ == "__main__":
    main()